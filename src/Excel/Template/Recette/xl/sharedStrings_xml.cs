// ------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime : 16.0.0.0
//  
//     Les changements apportés à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Excel.Template.Recette.xl
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\_Projects\Azure\facturation-api\src\Excel\Template\Recette\xl\sharedStrings_xml.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class sharedStrings_xml : sharedStrings_xmlBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<sst xmlns=\"http://schem" +
                    "as.openxmlformats.org/spreadsheetml/2006/main\" count=\"227\" uniqueCount=\"66\">\r\n  " +
                    "<si>\r\n    <t>ANNEE :</t>\r\n  </si>\r\n  <si>\r\n    <t>Livre chronologique des recett" +
                    "es</t>\r\n  </si>\r\n  <si>\r\n    <t>Date</t>\r\n  </si>\r\n  <si>\r\n    <t>Réf. de la piè" +
                    "ce</t>\r\n  </si>\r\n  <si>\r\n    <t>Client</t>\r\n  </si>\r\n  <si>\r\n    <t>Nature</t>\r\n" +
                    "  </si>\r\n  <si>\r\n    <t>Montant HT</t>\r\n  </si>\r\n  <si>\r\n    <t>Montant TTC</t>\r" +
                    "\n  </si>\r\n  <si>\r\n    <t>Montant TVA</t>\r\n  </si>\r\n  <si>\r\n    <t>Mode d’encaiss" +
                    "ement</t>\r\n  </si>\r\n  <si>\r\n    <t>Livre de recettes</t>\r\n  </si>\r\n  <si>\r\n    <" +
                    "t>F2016100003</t>\r\n  </si>\r\n  <si>\r\n    <t>Magic Form Epinay Sur Seine</t>\r\n  </" +
                    "si>\r\n  <si>\r\n    <t>Service</t>\r\n  </si>\r\n  <si>\r\n    <t>Chèque</t>\r\n  </si>\r\n  " +
                    "<si>\r\n    <t>F2016090001</t>\r\n  </si>\r\n  <si>\r\n    <t>Consultime Thibaud Droin</" +
                    "t>\r\n  </si>\r\n  <si>\r\n    <t>Virement</t>\r\n  </si>\r\n  <si>\r\n    <t>F2016110006</t" +
                    ">\r\n  </si>\r\n  <si>\r\n    <t>F2016100002</t>\r\n  </si>\r\n  <si>\r\n    <t>F2016120008<" +
                    "/t>\r\n  </si>\r\n  <si>\r\n    <t>F2016100004</t>\r\n  </si>\r\n  <si>\r\n    <t>F201610000" +
                    "5</t>\r\n  </si>\r\n  <si>\r\n    <t>F2016120009</t>\r\n  </si>\r\n  <si>\r\n    <t>F2016110" +
                    "007</t>\r\n  </si>\r\n  <si>\r\n    <t>F2017020001</t>\r\n  </si>\r\n  <si>\r\n    <t>F20170" +
                    "30003</t>\r\n  </si>\r\n  <si>\r\n    <t>F2017040005</t>\r\n  </si>\r\n  <si>\r\n    <t>F201" +
                    "7030002</t>\r\n  </si>\r\n  <si>\r\n    <t>F2017050007</t>\r\n  </si>\r\n  <si>\r\n    <t>CA" +
                    "RBON IT Maxime PENIN</t>\r\n  </si>\r\n  <si>\r\n    <t>F2017030004</t>\r\n  </si>\r\n  <s" +
                    "i>\r\n    <t>F2017060009</t>\r\n  </si>\r\n  <si>\r\n    <t>F2017050006</t>\r\n  </si>\r\n  " +
                    "<si>\r\n    <t>F2017070010</t>\r\n  </si>\r\n  <si>\r\n    <t>F2017050008</t>\r\n  </si>\r\n" +
                    "  <si>\r\n    <t>F2017070012</t>\r\n  </si>\r\n  <si>\r\n    <t>F2017070011</t>\r\n  </si>" +
                    "\r\n  <si>\r\n    <t>F2018010001</t>\r\n  </si>\r\n  <si>\r\n    <t>F2018020002</t>\r\n  </s" +
                    "i>\r\n  <si>\r\n    <t>F2018040003</t>\r\n  </si>\r\n  <si>\r\n    <t>F2018050004</t>\r\n  <" +
                    "/si>\r\n  <si>\r\n    <t>F2018060005</t>\r\n  </si>\r\n  <si>\r\n    <t>F2018060006</t>\r\n " +
                    " </si>\r\n  <si>\r\n    <t>HR TEAM CONSULTING</t>\r\n  </si>\r\n  <si>\r\n    <t>31/10/201" +
                    "8</t>\r\n  </si>\r\n  <si>\r\n    <t>18-09-1</t>\r\n  </si>\r\n  <si>\r\n    <t>18-10-2</t>\r" +
                    "\n  </si>\r\n  <si>\r\n    <t>18-10-3</t>\r\n  </si>\r\n  <si>\r\n    <t>19-07-5</t>\r\n  </s" +
                    "i>\r\n  <si>\r\n    <t>19-08-7</t>\r\n  </si>\r\n  <si>\r\n    <t>19-08-8</t>\r\n  </si>\r\n  " +
                    "<si>\r\n    <t>30/11/2018</t>\r\n  </si>\r\n  <si>\r\n    <t>10/12/2018</t>\r\n  </si>\r\n  " +
                    "<si>\r\n    <t>F2019020001</t>\r\n  </si>\r\n  <si>\r\n    <t>F2019030004</t>\r\n  </si>\r\n" +
                    "  <si>\r\n    <t>F2019040005</t>\r\n  </si>\r\n  <si>\r\n    <t>F2019050006</t>\r\n  </si>" +
                    "\r\n  <si>\r\n    <t>11/09/2019</t>\r\n  </si>\r\n  <si>\r\n    <t>11/10/2019</t>\r\n  </si>" +
                    "\r\n  <si>\r\n    <t>11/08/2019</t>\r\n  </si>\r\n  <si>\r\n    <t>COGIDATA</t>\r\n  </si>\r\n" +
                    "  <si>\r\n    <t>TOTAL HT</t>\r\n  </si>\r\n  <si>\r\n    <t>12/11/2019</t>\r\n  </si>\r\n  " +
                    "<si>\r\n    <t>19-10-9</t>\r\n  </si>\r\n  <si>\r\n    <t>ALLEGIS GROUP SAS</t>\r\n  </si>" +
                    "\r\n</sst>");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class sharedStrings_xmlBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
